#!/usr/bin/env node
var pkg = require('../package.json');
var childProcess = require('child_process');
var util = require('util');
var path = require('path');

var babel = require('babel');
var browserify = require('browserify');
var fse = require('fs-extra');
var nodeWatch = require('node-watch');
var uglifyJS = require('uglify-js');

'use strict';

// CONFIG
// -----------------------------------------------
var srcDir = 'src';
var distDir = 'dist';
var cwd = process.cwd();

// options for babel
var babelOptions = {
  sourceMap: 'inline',
  modules: 'common',
  optional: ['runtime']
};

// options for browserify
var browserifyOptions = {
  standalone: pkg.standalone,
  debug: true
};

// colors for shell - for a more complete list
// cf. http://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux
//var red   = '\033[0;31m';
//var green = '\033[0;32m';
//var NC    = '\033[0m'; // No Color

// I don't really like console apps messing with different colours: it
// presumes too much about the other colours in your environment --cc
var red = '';
var green = '';
var NC = '';

// COMMAND INTERPRETER
// -----------------------------------------------
var command = process.argv[2];

// arguments - create a key value object with next arguments
var args = process.argv.slice(3);
var argv = {};
for (var i = 0; i < args.length; i += 2) {
  argv[args[i]] = args[i + 1];
}

// execute the correct function given the script
switch (command) {
  case '--watch':
    watch();
    break;
  case '--bundle':
    bundle();
    break;
  case '--uglify':
    uglify();
    break;
  case '--transpile':
    transpileAll();
    break;
  case '--cover-report':
    coverReport(argv['-i']);
    break;
  case '--doc':
    generateDoc();
    break;
  case '--dev-test':
    var result = testGitMasterBranch();
    console.log(result);
    break;
}

// HELPERS
// -----------------------------------------------

// create filename from src to dist
function createTargetName(filename) {
  // replace source dir with target dir
  return filename.replace(new RegExp('^' + srcDir), distDir);
}

// create filename from `pck.main` to `umd` version
function getUmdName() {
  var filename = path.basename(pkg.main);
  return filename.replace('.js', '.umd.js');
}

// create filename from `umd` to `min` version
function getMinName() {
  return getUmdName().replace('.umd.js', '.min.js');
}

function padRight(input, size, str) {
  str = str ||Â ' ';
  while (input.toString().length < size) {
    input = input + ' ';
  }
  return input;
}

function isGitMasterBranch() {
  var branch = childProcess.execSync('git symbolic-ref HEAD');
  return branch.toString().search('refs/heads/master') !== -1;
}

// SCRIPTS
// -----------------------------------------------

function generateDoc() {
  // check if in master
  if (!isGitMasterBranch()) {
    var msg = red + '=> you must be in master branch to run the `doc` command' + NC;
    return console.log(msg);
  }

    process.stdin.resume();
    console.log("  *** WARNING\n");
    console.log("  This script deletes & recreates the local gh-pages branch, regnerates");
    console.log("  the documentation, commits it along with everything in your examples");
    console.log("  folder, and force-pushes to the origin remote.\n");
    console.log("  At the very least, you probably want to run this in a clean working copy.\n");
    console.log("  If you are not sure whether this is a good idea, hit ^C now.");
    console.log("  Otherwise press Return to continue.\n");
    process.stdin.on('data', function () {
        actuallyGenerateDoc();
    });
}

function actuallyGenerateDoc() {
    
  var execSync = childProcess.execSync;
  // prevent loosing non-comitted work
  execSync('git stash save');
  // delete current gh-pages branch if exists
  try { execSync('git branch -D gh-pages'); } catch (err) {}
  // create gh-pages branch
  execSync('git checkout -b gh-pages');
  // run esdoc
  execSync('esdoc -c ' + path.join(cwd, 'esdoc.json'));
  console.log('Created documentation');
  // rm * but doc/ examples/ README.md
  var files = fse.readdirSync(cwd);
  var toKeep = [
    '.git',
    '.gitignore',
    'bin',
    'doc',
    'examples',
    'node_modules',
    'README.md',
    'esdoc.json'
  ];

  toKeep.push(getUmdName());
  toKeep.push(getMinName());

  files.forEach(function(file) {
    if (toKeep.indexOf(file) !== -1) { return; }
    fse.removeSync(file);
    console.log('delete ' + file);
  });

  fse.copySync('doc', '.');
  console.log('copy doc into ' + cwd);

  fse.removeSync('doc');

  execSync('git add -A');
  execSync('git commit -am "updated documentation"');
  execSync('git push origin gh-pages --force');
  execSync('git checkout master');
  execSync('git branch -D gh-pages');
  try { execSync('git stash pop'); } catch(err) {}
}

// watch source dir
function watch() {
  nodeWatch(srcDir, function(filename) {
    transpile(filename);
  });
}

// create the `.umd.js` version
function bundle() {
  var src = './' + pkg.main;
  var target = getUmdName();
  var b = browserify(src, browserifyOptions);

  try {
    b.bundle().pipe(fse.createWriteStream(target));
    // is not called at the right place - streams are async
    var msg = green + '=> "%s" successfully created' + NC;
    console.log(util.format(msg, target));
  } catch(e) {
    return console.log(err.message);
  }

}

// create the `.min.js` version
function uglify() {
  var src = getUmdName();
  var target = getMinName();
  var res = uglifyJS.minify(src);

  fse.outputFile(target, res.code, function(err, res) {
    if (err) { return console.log(err.message); }

    var msg = green + '=> "%s" successfully created' + NC;
    console.log(util.format(msg, target));
    // ask
    console.log(red + '==> THINK ABOUT UPDATING VERSION [npm --help version] <==' + NC);
  });
}

function walkSync(dir, filelist) {
    var path = path || require('path');
    var fs = fs || require('fs'),
        files = fs.readdirSync(dir);
    filelist = filelist || [];
    files.forEach(function(file) {
        if (fs.statSync(path.join(dir, file)).isDirectory()) {
            filelist = walkSync(path.join(dir, file), filelist);
        }
        else {
            filelist.push(path.join(dir, file));
        }
    });
    return filelist;
};

// transpile all files in `srcDir`
function transpileAll() {
    var fileList = walkSync(srcDir, []);

    var stack = [];

    for (var i = 0; i < fileList.length; i++) {
	var file = fileList[i];
	if (!file || !file.endsWith(".js")) {
	    continue;
	}
	stack.push(file);
    }

    transpile(stack.shift(), stack);
}

// transpile one file or several files sequencially
// @param `stack` is a workaround for babel which has some kind of leak and
// cannot transpile several files in parallel without being messy with sourceMaps.
// Using the Sync method crash the entire script each time there is an error in
// the code which is really boring when watching...
function transpile(src, stack) {
  var target = createTargetName(src);

  babel.transformFile(src, babelOptions, function (err, result) {
    if (err) { return console.log(err.codeFrame); }

    fse.outputFile(target, result.code, function(err) {
      if (err) { return console.error(err.message); }

      var msg = green + '=> "%s" successfully transpiled to "%s"' + NC;
      console.log(util.format(msg, src, target));

      // next
      if (stack && stack.length) {
        transpile(stack.shift(), stack);
      }
    });
  });
}

// cover report
function coverReport(input) {
  var chunks = [];
  var coverageFile = fse.readFileSync(input);
  var coverageJson = JSON.parse(coverageFile);

  Object.keys(coverageJson).forEach(function(filename, index) {
    if (coverageJson[filename].length === 0) { return; }
    console.log('\n> coverage of: ' + filename + '\n');

    var notCovered = {};
    var file = fse.readFileSync(filename, 'utf8').split('\n');

    // trace reported lines
    coverageJson[filename].forEach(function(currentFileCoverage) {
      var line = currentFileCoverage['lineNum'];
      var range = currentFileCoverage.lines[0].range;
      notCovered[line] = range;
    });

    // log the whole file with colors according to reporting
    file.forEach(function(line, index) {
      var prefix = padRight(index + 1, 6);

      if (notCovered[index + 1]) {
        console.log(prefix + ' ' + red + line + NC);
      } else {
        console.log(prefix + ' ' + green + line + NC);
      }
    });
  });
}


